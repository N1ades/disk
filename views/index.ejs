<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Storage</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .drag-drop-area {
            border: 2px dashed #007bff;
            padding: 2rem;
            text-align: center;
            margin: 2rem 0;
            cursor: pointer;
        }
        .progress {
            height: 25px;
            margin: 1rem 0;
        }
        .file-list td {
            vertical-align: middle;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1 class="mb-4">Video Storage</h1>
        
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Storage Status</h5>
                <p>Total: <%= diskInfo.total %></p>
                <p>Used: <%= diskInfo.used %></p>
                <p>Free: <%= diskInfo.free %></p>
            </div>
        </div>

        <div class="drag-drop-area" id="dropZone">
            <p>Drag and drop files here or click to upload</p>
            <input type="file" id="fileInput" multiple style="display: none;">
        </div>

        <div id="uploadProgress"></div>

        <table class="table table-hover file-list">
            <thead>
                <tr>
                    <th>File Name</th>
                    <th>Size</th>
                    <th>Upload Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% files.forEach(file => { %>
                    <tr>
                        <td><%= file.name %></td>
                        <td><%= file.size %></td>
                        <td><%= file.date %></td>
                        <td>
                            <a href="<%= file.url %>" class="btn btn-sm btn-primary">Download</a>
                            <button class="btn btn-sm btn-danger delete-btn" data-file="<%= file.name %>">Delete</button>
                            <button class="btn btn-sm btn-secondary copy-btn" data-url="<%= file.url %>">Copy Link</button>
                        </td>
                    </tr>
                <% }); %>
            </tbody>
        </table>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script src="/resumable.js"></script>
        <script>
            // Инициализация Resumable.js
            // const r = new Resumable({
            //     target: '/upload',
            //     chunkSize: 2*1024*1024,
            //     simultaneousUploads: 3,
            //     testChunks: false,
            //     maxFileSize: <%= MAX_FILE_SIZE %> // Добавим проверку размера на клиенте
            // })

            const r = new Resumable({
                target: '/upload',
                testTarget: '/upload',
                chunkSize: 2*1024*1024,
                simultaneousUploads: 3,
                testChunks: true,
                maxFileSize: <%= MAX_FILE_SIZE %>
            });
        
            // Настройка элементов интерфейса
            const dropZone = document.getElementById('dropZone')
            const fileInput = document.getElementById('fileInput')
            const uploadProgress = document.getElementById('uploadProgress')
            
            // Привязка элементов к Resumable.js
            r.assignBrowse(fileInput)
            r.assignDrop(dropZone)
        
            // Обработчики событий Resumable.js
            r.on('fileAdded', (file) => {
                // Проверка общего размера файлов
                if (r.getSize() > <%= MAX_FILE_SIZE %>) {
                    alert('File size exceeds maximum allowed!')
                    r.removeFile(file)
                    return
                }
        
                // Создание элемента прогресса
                const progressHTML = `
                    <div class="progress mb-2" id="${file.uniqueIdentifier}-container">
                        <div id="${file.uniqueIdentifier}" 
                            class="progress-bar" 
                            role="progressbar" 
                            style="width: 0%">
                            ${file.fileName} - 0% (0 MB/s)
                        </div>
                    </div>
                `
                uploadProgress.insertAdjacentHTML('beforeend', progressHTML)
                r.upload()
            })
        
            r.on('fileProgress', (file) => {
                const progressBar = document.getElementById(file.uniqueIdentifier)
                const speed = (file.averageSpeed / 1024 / 1024).toFixed(2)
                const progress = Math.floor(file.progress() * 100)
                
                // Рассчет оставшегося времени
                const remainingBytes = file.size - file.progress() * file.size
                const remainingTime = (remainingBytes / (file.averageSpeed || 1)).toFixed(1)
                
                progressBar.style.width = `${progress}%`
                progressBar.innerHTML = `
                    ${file.fileName} - ${progress}% (${speed} MB/s)
                    ${remainingTime}s remaining
                `
            })
        
            r.on('fileSuccess', (file) => {
                const container = document.getElementById(`${file.uniqueIdentifier}-container`)
                if (container) {
                    container.remove()
                }
                location.reload() // Обновляем список файлов после загрузки
            })
        
            // Обработчики для удаления и копирования
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('delete-btn')) {
                    if (confirm('Are you sure you want to delete this file?')) {
                        fetch(`/delete/${e.target.dataset.file}`, { 
                            method: 'DELETE' 
                        }).then(() => location.reload())
                    }
                }
                
                if (e.target.classList.contains('copy-btn')) {
                    const url = window.location.origin + e.target.dataset.url
                    navigator.clipboard.writeText(url)
                        .then(() => alert('Link copied to clipboard!'))
                        .catch(() => alert('Failed to copy link'))
                }
            })
        
            // Обработчик перетаскивания файлов
            dropZone.addEventListener('dragover', (e) => {
                e.preventDefault()
                dropZone.style.backgroundColor = '#f8f9fa'
            })
        
            dropZone.addEventListener('dragleave', () => {
                dropZone.style.backgroundColor = ''
            })
        </script>
    </div>
</body>
</html>